library(e1071)
library(class)
rm(list=ls())
df = read.csv('adult_income_Bayes.csv',header=TRUE, sep=",", na.string = " ?")
head(df, n=5)
summary(df)
nrow(df)
df <- na.omit(df)
nrow(df)
df$Income <- factor(df$Income, levels = c(" <=50K"," >50K"),labels = c(0, 1))
df$Income
test = df[seq(1, nrow(df), 5), ]
nrow(test)
head(test)
train = df[-seq(5, nrow(df), by = 5),]
nrow(train)
head(train)
nb<- naiveBayes(Income ~ ., data = train)
#Predicting class for test set
predict <- predict(nb, test)
#Confusion Matrix
conf_matrix <- table(nb=predict,class=test$Income)
print(conf_matrix)
#Accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(conf_matrix)
wrong<-sum(test$Income!=predict)
error_rate<-wrong/length(test$Income)
error_rate
library(e1071)
library(class)
rm(list=ls())
data = read.csv('adult_income_Bayes.csv',header=TRUE, sep=",", na.string = " ?")
head(data, n=5)
summary(data)
nrow(data)
df <- na.omit(data)
nrow(data)
data <- na.omit(data)
nrow(data)
data$Income <- factor(data$Income, levels = c(" <=50K"," >50K"),labels = c(0, 1))
data$Income
test = data[seq(1, nrow(data), 5), ]
nrow(test)
head(test)
train = df[-seq(5, nrow(data), by = 5),]
nrow(train)
head(train)
nb<- naiveBayes(Income ~ ., data = train)
#Predicting class for test set
predict <- predict(nb, test)
#Confusion Matrix
conf_matrix <- table(nb=predict,class=test$Income)
print(conf_matrix)
#Accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(conf_matrix)
wrong<-sum(test$Income!=predict)
error_rate<-wrong/length(test$Income)
error_rate
wrong<-sum(test$Income!=predict)
library(e1071)
library(class)
rm(list=ls())
data = read.csv('adult_income_Bayes.csv',header=TRUE, sep=",", na.string = " ?")
head(data, n=5)
#Summarizing each column
summary(data)
#Check the number of rows before
nrow(data)
#Remove the rows with missing values
data <- na.omit(data)
#Check the number of rows after
nrow(data)
#Convert labels to factor class
data$Income <- factor(data$Income, levels = c(" <=50K"," >50K"),labels = c(0, 1))
data$Income
test = data[seq(1, nrow(data), 5), ]
nrow(test)
head(test)
train = data[-seq(5, nrow(data), by = 5),]
nrow(train)
head(train)
nb<- naiveBayes(Income ~ ., data = train)
#Predicting class for test set
predict <- predict(nb, test)
#Confusion Matrix
conf_matrix <- table(nb=predict,class=test$Income)
print(conf_matrix)
#Accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(conf_matrix)
wrong<-sum(test$Income!=predict)
error_rate<-wrong/length(test$Income)
error_rate
# Knowledge Discovery and Data Mining (CS 513B)
# Course      : CS 513B
# First Name  : Sanket
# Last Name   : Patidar
# CWID        : 10445969
# Purpose     : MidTerm Q6
##########################################################
library(e1071)
library(class)
rm(list=ls())
data = read.csv('adult_income_Bayes.csv',header=TRUE, sep=",", na.string = " ?")
head(data, n=5)
#Summarizing each column
summary(data)
#Check the number of rows before
nrow(data)
#Remove the rows with missing values
data <- na.omit(data)
#Check the number of rows after
nrow(data)
#Convert labels to factor class
data$Income <- factor(data$Income, levels = c(" <=50K"," >50K"),labels = c(0, 1))
data$Income
test = data[seq(1, nrow(data), 5), ]
nrow(test)
head(test)
train = data[-seq(5, nrow(data), by = 5),]
nrow(train)
head(train)
nb<- naiveBayes(Income ~ ., data = train)
#Predicting class for test set
predict <- predict(nb, test)
#Confusion Matrix
conf_matrix <- table(nb=predict,class=test$Income)
print(conf_matrix)
#Accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(conf_matrix)
wrong<-sum(test$Income!=predict)
error_rate<-wrong/length(test$Income)
error_rate
rm(list=ls())
library(C50)
dataSet<-read.csv("adult_income_Dtree.csv",na.strings = ' ?')
View(dataSet)
dataSet<-as.data.frame(apply(dataSet,2,function(x)gsub('\\s+', '',x)))
View(dataSet)
#a)Select every fifth record, starting with the first record, as the test dataset and the remaining records as the training dataset
index<-seq(1,nrow(dataSet),by=5)
rm(list=ls())
library(C50)
dataSet<-read.csv("adult_income_Dtree.csv",na.strings = ' ?')
