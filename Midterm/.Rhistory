prop.table(
ftable(class=Titanic_rows$Class,Age=Titanic_rows$Age,Sex=Titanic_rows$Sex,
Survival=Titanic_rows$Survived,row.vars = 1:3)
)
nBayes_all <- naiveBayes(Survived ~., data =Titanic_rows)
category_all<-predict(nBayes_all,Titanic_rows  )
table(NBayes_all=category_all,Survived=Titanic_rows$Survived)
NB_wrong<-sum(category_all!=Titanic_rows$Survived)
NB_error_rate<-NB_wrong/length(category_all)
rm(list=ls())
library(e1071)
library(class)
## main functions used in this program
?read.csv()
?naiveBayes()
?tabulate();  tabulate(c(2,3,3,5), nbins = 10);
?table()
?ftable()
?as.character()
#csvfile<-file.choose("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
Titanic_rows<-  read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
View(Titanic_rows)
class(Titanic_rows)
?prop.table
prop.table
table(class=Titanic_rows$Class,Survival=Titanic_rows$Survived)
prop.table(table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived))
## Naive Bayes classification using only one variable
nBayes_class <- naiveBayes(Survived ~Class, data =Titanic_rows)
category_class<-predict(nBayes_class,Titanic_rows  )
## Compare the prediction to actual
data_class<-cbind(Titanic_rows,category_class)
table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived)
table(Class=Titanic_rows$Class,NBayes=category_class)
table(NBayes=category_class,Survived=Titanic_rows$Survived)
?prop.table
prop.table(table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived))
## Naive Bayes classification using two variables
nBayes_class_age <- naiveBayes(Survived ~Class+Age, data =Titanic_rows)
category_class_age<-predict(nBayes_class_age,Titanic_rows  )
## Compare the prediction to actual for two variables
table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived,NBayes=category_class_age,row.vars = 1:3)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived,NBayes=category_class_age)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived)
ftable(class=Titanic_rows$Class,Age=Titanic_rows$Age,Sex=Titanic_rows$Sex,
Survival=Titanic_rows$Survived,row.vars = 1:3)
prop.table(
ftable(class=Titanic_rows$Class,Age=Titanic_rows$Age,Sex=Titanic_rows$Sex,
Survival=Titanic_rows$Survived,row.vars = 1:3)
)
nBayes_all <- naiveBayes(Survived ~., data =Titanic_rows)
category_all<-predict(nBayes_all,Titanic_rows  )
table(NBayes_all=category_all,Survived=Titanic_rows$Survived)
NB_wrong<-sum(category_all!=Titanic_rows$Survived)
NB_error_rate<-NB_wrong/length(category_all)
View(Titanic_rows)
rm(list=ls())
library(e1071)
library(class)
#csvfile<-file.choose("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
Titanic_rows<-  read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv")
table(class=Titanic_rows$Class,Survival=Titanic_rows$Survived)
## Naive Bayes classification using only one variable
nBayes_class <- naiveBayes(Survived ~Class, data =Titanic_rows)
## Naive Bayes classification using only one variable
nBayes_class <- naiveBayes(Titanic_rows$Class ~Class, data =Titanic_rows)
category_class<-predict(nBayes_class,Titanic_rows  )
## Compare the prediction to actual
data_class<-cbind(Titanic_rows,category_class)
nBayes_class <- naiveBayes(Titanic_rows$Class , data =Titanic_rows)
nBayes_class <- naiveBayes(Titanic_rows$Class~., data =Titanic_rows)
category_class<-predict(nBayes_class,Titanic_rows  )
table(category_class, Titanic_rows$response,dnn=c("Prediction","Actual"))
#csvfile<-file.choose("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
Titanic_rows<-  read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
rm(list=ls())
#install.packages('e1071', dependencies = TRUE)
library(class)
library(e1071)
df <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
df[,1:11][df[,1:11]=="?"] <- NA
df <- na.omit(df)
idx<-sort(sample(nrow(df),as.integer(.70*nrow(df))))
train <- df[idx,]
test  <- df[-idx,]
cl_train <- df$Class[idx]
cl_test <- df$Class[-idx]
nb <- naiveBayes(cl_train ~., data =train)
nb <- naiveBayes(cl_train ~., data =train)
nb <- naiveBayes(cl_train ~., data =train)
category_all<-predict(nb,test  )
table(category_all,test)
category_all<-predict(nb,train  )
table(category_all,test)
## remove all objects
rm(list=ls())
?install.packages
# check to see if you have the kknn package
installed.packages()
library(kknn)
?kknn()
#Load the iris dataset and attach it
cancer_dataset<-read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv",na.string = "?")
View(cancer_dataset)
cancer_dataset[,1:11][cancer_dataset[,1:11]=="?"] <- NA
cancer_dataset <- na.omit(cancer_dataset)
range_1_100<- 1:100
sample(range_1_100,70)
smpl70 <- sort(sample(range_1_100,70))
df <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
df[,1:11][df[,1:11]=="?"] <- NA
df <- na.omit(df)
idx<-sort(sample(nrow(cancer_dataset),as.integer(.65*nrow(cancer_dataset))))
training<-cancer_dataset[idx,]
test<-cancer_dataset[-idx,]
index <- seq(1,nrow(cancer_dataset),by=5)
test<-cancer_dataset[index,]
training <-cancer_dataset[-index,]
?lapply(list, function)
test<-lapply(test,factor)
is.factor(test$F3)
?kknn()
predict_k5 <- kknn(formula=Class~., training, test, k=5,kernel ="rectangular"  )
fit <- fitted(predict_k5)
table(test$Class,fit)
firstlastcol<-cbind(cancer_dataset[,1],cancer_dataset[,11])
firstlastcol
rm(list=ls())
library(class)
df <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
df[,1:11][df[,1:11]=="?"] <- NA
df <- na.omit(df)
View(df)
idx<-sort(sample(nrow(df),as.integer(.70*nrow(df))))
train <- df[idx,]
test  <- df[-idx,]
cl_train <- df$Class[idx]
cl_test <- df$Class[-idx]
pred <- knn(train,test,cl=cl_train,k=3)
#cl_test <- lapply(cl_test, factor)
conf_matrix <- table(pred, cl_test)
#conf_matrix <- lapply(conf_matrix, factor)
print(conf_matrix)
#train<-lapply(train, factor)
#fit <- fitted(pred)
rm(list=ls())
install.packages('e1071', dependencies = TRUE)
install.packages("e1071", dependencies = TRUE)
library(e1071)
library(class)
## main functions used in this program
?read.csv()
?naiveBayes()
?tabulate();  tabulate(c(2,3,3,5), nbins = 10);
?table()
?ftable()
?as.character()
csvfile<-file.choose()
cancer_data<-  read.csv(csvfile)
class(cancer_data)
?prop.table
prop.table
table(sample=cancer_data$Sample,class=cancer_data$Class)
prop.table(table(sample=cancer_data$Sample,class=cancer_data$Class))
## Naive Bayes classification using only one variable
nBayes_class <- naiveBayes(Class ~Sample, data =cancer_data)
category_class<-predict(nBayes_class,cancer_data  )
## Compare the prediction to actual
data_class<-cbind(cancer_data,category_class)
table(sample=cancer_data$Sample,class=cancer_data$Class)
table(Sample=cancer_data$Sample,NBayes=category_class)
table(NBayes=category_class,Survived=Titanic_rows$Survived)
?prop.table
prop.table(table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived))
## Naive Bayes classification using two variables
nBayes_class_age <- naiveBayes(Survived ~Class+Age, data =Titanic_rows)
category_class_age<-predict(nBayes_class_age,Titanic_rows  )
## Compare the prediction to actual for two variables
table(Class=Titanic_rows$Class,Survived=Titanic_rows$Survived)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived,NBayes=category_class_age,row.vars = 1:3)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived,NBayes=category_class_age)
ftable(Class=Titanic_rows$Class,Titanic_rows$Age,Survived=Titanic_rows$Survived)
ftable(class=Titanic_rows$Class,Age=Titanic_rows$Age,Sex=Titanic_rows$Sex,
Survival=Titanic_rows$Survived,row.vars = 1:3)
prop.table(
ftable(class=Titanic_rows$Class,Age=Titanic_rows$Age,Sex=Titanic_rows$Sex,
Survival=Titanic_rows$Survived,row.vars = 1:3)
)
nBayes_all <- naiveBayes(Survived ~., data =Titanic_rows)
category_all<-predict(nBayes_all,Titanic_rows  )
table(NBayes_all=category_all,Survived=Titanic_rows$Survived)
NB_wrong<-sum(category_all!=Titanic_rows$Survived)
NB_error_rate<-NB_wrong/length(category_all)
data_class<-cbind(cancer_data,category_class)
rm(list=ls())
library(e1071)
library(class)
## main functions used in this program
?read.csv()
?naiveBayes()
?tabulate();  tabulate(c(2,3,3,5), nbins = 10);
?table()
?ftable()
?as.character()
csvfile<-file.choose()
cancer_data<-  read.csv(csvfile)
class(cancer_data)
?prop.table
prop.table
table(sample=cancer_data$Sample,class=cancer_data$Class)
prop.table(table(sample=cancer_data$Sample,class=cancer_data$Class))
## Naive Bayes classification using only one variable
nBayes_class <- naiveBayes(Class ~Sample, data =cancer_data)
category_class<-predict(nBayes_class,cancer_data  )
table(NBayes_all=category_all,Survived=cancer_data$Class)
table(NBayes_all=category_class,Survived=cancer_data$Class)
rm(list=ls())
#install.packages('e1071', dependencies = TRUE)
library(class)
library(e1071)
df <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
df[,1:11][df[,1:11]=="?"] <- NA
df <- na.omit(df)
View(df)
table(sample=df$Sample,class=df$Class)
nBayes_class <- naiveBayes(class ~sample, data =df)
nBayes_class <- naiveBayes(Y ~X, data =df)
table(X=df$Sample,Y=df$Class)
nBayes_class <- naiveBayes(Y ~X, data =df)
Titanic_rows<-  read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW4/Titanic_rows.csv")
View(Titanic_rows)
rm(list=ls())
#install.packages('e1071', dependencies = TRUE)
library(class)
library(e1071)
df <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
df[,1:11][df[,1:11]=="?"] <- NA
idx<-sort(sample(nrow(df),as.integer(.70*nrow(df))))
train <- df[idx,]
test  <- df[-idx,]
cl_train <- df$Class[idx]
cl_test <- df$Class[-idx]
table(sample=df$Sample,class=df$Class)
nBayes_class <- naiveBayes(Class ~Sample, data =df)
category_class<-predict(nBayes_class,df  )
data_class<-cbind(df,category_class)
table(NBayes=category_class,Survived=df$Class)
View(nBayes_class)
cl_test <- df$Class[-idx]
table(sample=df$Sample,class=df$Class)
nBayes_class <- naiveBayes(Class ~Sample, data =df)
category_class<-predict(nBayes_class,df  )
table(NBayes=category_class,Survived=df$Class)
table(sample=df$Sample,class=df$Class)
nBayes_class <- naiveBayes(Class ~Sample, data =df)
category_class<-predict(nBayes_class,df  )
category_class <- as.factor(category_class)
survive <- as.factor(df$Class)
table(NBayes=category_class,Survived=survive)
install.packages(c("ggplot2", "naivebayes", "psych"))
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
# Data
data <- read.csv(file.choose(), header = T)
str(data)
xtabs(~admit+rank, data = data)
data$rank <- as.factor(data$rank)
data$admit <- as.factor(data$admit)
# Data Partition
set.seed(1234)
ind <- sample(2, nrow(data), replace = T, prob = c(0.8, 0.2))
train <- data[ind == 1,]
test <- data[ind == 2,]
# Naive Bayes Model
model <- naive_bayes(admit ~ ., data = train, usekernel = T)
model
train %>%
filter(admit == "1") %>%
summarise(mean(gre), sd(gre))
# Predict
p <- predict(model, train, type = 'prob')
head(cbind(p, train))
# Confusion Matrix - train data
p1 <- predict(model, train)
(tab1 <- table(p1, train$admit))
1 - sum(diag(tab1)) / sum(tab1)
# Confusion Matrix - test data
p2 <- predict(model, test)
(tab2 <- table(p2, test$admit))
1 - sum(diag(tab2)) / sum(tab2)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
rm(list=ls())
# Data
data <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
View(data)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
rm(list=ls())
# Data
data <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
#str(data)
#xtabs(~admit+rank, data = data)
data$Class <- as.factor(data$rank)
data$Sample <- as.factor(data$admit)
# Data Partition
set.seed(1234)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
rm(list=ls())
# Data
data <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
#str(data)
#xtabs(~admit+rank, data = data)
data$Class <- as.factor(data$Class)
data$Sample <- as.factor(data$Sample)
# Data Partition
set.seed(1234)
idx<-sort(sample(nrow(data),as.integer(.70*nrow(data))))
train <- df[idx,]
test  <- df[-idx,]
# Naive Bayes Model
model <- naive_bayes(Class ~ ., data = train, usekernel = T)
# Libraries
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
rm(list=ls())
# Data
data <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
#str(data)
#xtabs(~admit+rank, data = data)
data$Class <- as.factor(data$Class)
data$Sample <- as.factor(data$Sample)
# Data Partition
set.seed(1234)
idx<-sort(sample(nrow(data),as.integer(.70*nrow(data))))
train <- data[idx,]
test  <- data[-idx,]
# Naive Bayes Model
model <- naive_bayes(Class ~ ., data = train, usekernel = T)
# Naive Bayes Model
model <- naive_bayes(Class ~ ., data = train)
# Data Partition
set.seed(1234)
idx<-sort(sample(nrow(data),as.integer(.70*nrow(data))))
train <- data[idx,]
test  <- data[-idx,]
# Naive Bayes Model
model <- naive_bayes(Class ~ ., data = train)
model <- naiveBayes(Class ~ ., data = train)
# Predict
#p <- predict(model, train, type = 'prob')
head(cbind(p, train))
# Predict
p <- predict(model, train, type = 'prob')
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string="?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string="?")
df[,1:11][df[,1:11]=="?"] <- NA
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis
dataSet <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW2/breast-cancer-wisconsin.data.csv", na.string = "?")
#Summarizing each column
summary(dataSet)
#Replace ? with NA for simplicity
dataSet[,1:11][dataSet[,1:11]=="?"] <- NA
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis
dataSet <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW2/breast-cancer-wisconsin.data.csv", na.string = "?")
#Load the “breast-cancer-wisconsin.data.csv” from canvas into R and perform the EDA analysis
dataSet <- read.csv("/Users/parthxparab/Documents/Fall 2019/CS513/HW3/breast-cancer-wisconsin.data.csv", na.string = "?")
#Summarizing each column
summary(dataSet)
#Replace ? with NA for simplicity
dataSet[,1:11][dataSet[,1:11]=="?"] <- NA
#Identifying missing values
is.na(dataSet)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string="?")
df[,1:11][df[,1:11]=="?"] <- NA
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",header=TRUE, sep=",")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string="?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string=" ?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
test <- df[seq(1, nrow(df), by = 5),]
View(test)
train <- df[-test]
test <- df[seq(1, nrow(df), by = 5),]
train <- df[-test]
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string=" ?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
test <- df[seq(1, nrow(df), by = 5),]
train <- df[-seq(1, nrow(df), by = 5),]
View(test)
View(train)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string=" ?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
test <- df[seq(1, nrow(df), by = 5),]
train <- df[-seq(5, nrow(df), by = 5),]
View(test)
View(train)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/HW3")
#Import package 'e1071' for Naive Bayes Classifier and class package
#install.packages("e1071")
#install.packages(class)
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("breast-cancer-wisconsin.data.csv",na.string="?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
View(df)
# clearing object environment
rm(list=ls())
# set working directory
setwd("/Users/parthxparab/Documents/Fall 2019/CS513/Midterm/")
library(e1071)
library(class)
#Load Breast cancer data file CSV
df <- read.csv("adult_income_Bayes.csv",na.string=" ?")
#Remove any row with a missing value in any of the columns.
df<-na.omit(df)
View(df)
